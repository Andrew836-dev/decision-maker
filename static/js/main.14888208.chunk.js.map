{"version":3,"sources":["util/actions.js","components/TaskListHandler/index.js","components/TaskList/index.js","components/TaskSelector/index.js","components/TaskListDisplay/index.js","util/reducer.js","App.js","reportWebVitals.js","index.js"],"names":["ADD_TASK","CLEAR_LIST","REMOVE_TASK","TaskListHandler","dispatch","fieldName","onSubmit","event","preventDefault","type","fieldValue","target","value","trim","htmlFor","name","onClick","TaskList","tasks","length","map","task","index","removeTask","TaskSelector","defaultValue","useState","chosen","setChosen","useEffect","includes","chosenIndex","undefined","Math","floor","random","chooseRandom","TaskListDisplay","reducer","state","action","slice","console","log","App","useReducer","tasksDispatch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAAaA,EAAW,WACXC,EAAa,aACbC,EAAc,cCuBZC,MAvBf,YAAyC,IAAbC,EAAY,EAAZA,SACpBC,EAAY,WAYlB,OAAO,gCACL,uBAAMC,SAXR,SAA2BC,GACzBA,EAAMC,iBACNJ,EAAS,CAAEK,KAAMT,EAAUU,WAAYH,EAAMI,OAAN,SAAwBC,MAAMC,SACrEN,EAAMI,OAAN,SAAwBC,MAAQ,IAQhC,UACE,uBAAOE,QAAST,EAAhB,0BACA,uBAAOU,KAAMV,IACb,uBAAOI,KAAK,SAASG,MAAM,mBAE7B,wBAAQI,QAVV,WACEZ,EAAS,CAAEK,KAAMR,KASjB,4BCDWgB,MAlBf,YAAyC,IAApBC,EAAmB,EAAnBA,MAAOd,EAAY,EAAZA,SAI1B,QACIc,EAAMC,QAAU,6BACfD,EAAME,KAAI,SAACC,EAAMC,GAAP,OACT,+BACGD,EACD,wBAAQL,QAAS,kBARzB,SAAqBM,GACnBlB,EAAS,CAAEK,KAAMP,EAAaoB,UAODC,CAAWD,IAAlC,sBAFOD,SCoBFG,MA3Bf,YAA6C,IAApBN,EAAmB,EAAnBA,MACjBO,GADoC,EAAZrB,SACT,kFADqB,EAEdsB,mBAASD,GAFK,mBAEnCE,EAFmC,KAE3BC,EAF2B,KAmB1C,OAfAC,qBAAU,WACJF,IAAWF,GAAiBP,EAAMY,SAASH,IAC7CC,EAAUH,KAEX,CAACE,EAAQT,IAWL,gCACL,wBAAQF,QAAS,kBAVnB,WACE,GAAIE,EAAMC,OAAS,EAAG,OAAOS,EAAUH,GAEvC,IADA,IAAIM,OACkBC,IAAhBD,GAA6Bb,EAAMa,KAAiBJ,GACxDI,EAAcE,KAAKC,MAAMD,KAAKE,SAAWjB,EAAMC,QAEjDS,EAAUV,EAAMa,IAIOK,IAAvB,4BAGCT,MCfUU,MAPf,YAAgD,IAApBnB,EAAmB,EAAnBA,MAAOd,EAAY,EAAZA,SACjC,OAAO,qCACL,cAAC,EAAD,CAAUc,MAAOA,EAAOd,SAAUA,IAClC,cAAC,EAAD,CAAcc,MAAOA,Q,OCLV,SAASoB,EAASC,EAAOC,GACtC,OAAQA,EAAO/B,MACb,KAAKT,EACH,OAAIuC,EAAMT,SAASU,EAAO9B,YAAoB6B,EACxC,GAAN,mBAAWA,GAAX,CAAkBC,EAAO9B,aAC3B,KAAKR,EACH,MAAM,GAAN,mBAAWqC,EAAME,MAAM,EAAGD,EAAOlB,QAAjC,YAA4CiB,EAAME,MAAMD,EAAOlB,MAAQ,KACzE,KAAKrB,EACH,MAAO,GACT,QAEE,OADAyC,QAAQC,IAAI,oBAAqBH,GAC1BD,GCIEK,MAXf,WAAiB,IAAD,EACiBC,qBAAWP,EAAS,IADrC,mBACPpB,EADO,KACA4B,EADA,KAEd,OACE,sDAEE,cAAC,EAAD,CAAiB1C,SAAU0C,IAC3B,cAAC,EAAD,CAAiB5B,MAAOA,EAAOd,SAAU0C,QCChCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.14888208.chunk.js","sourcesContent":["export const ADD_TASK = \"ADD_TASK\";\r\nexport const CLEAR_LIST = \"CLEAR_LIST\";\r\nexport const REMOVE_TASK = \"REMOVE_TASK\";","import { ADD_TASK, CLEAR_LIST } from \"../../util/actions\";\r\n\r\nfunction TaskListHandler ({ dispatch }) {\r\n  const fieldName = \"taskName\";\r\n\r\n  function handleFormSubmit (event) {\r\n    event.preventDefault();\r\n    dispatch({ type: ADD_TASK, fieldValue: event.target[fieldName].value.trim() });\r\n    event.target[fieldName].value = \"\";\r\n  }\r\n\r\n  function clearList () {\r\n    dispatch({ type: CLEAR_LIST });\r\n  }\r\n\r\n  return <div>\r\n    <form onSubmit={handleFormSubmit}>\r\n      <label htmlFor={fieldName}>Enter a task</label>\r\n      <input name={fieldName} />\r\n      <input type=\"submit\" value=\"Add to List\" />\r\n    </form>\r\n    <button onClick={clearList}>Clear List</button>\r\n  </div>\r\n}\r\n\r\nexport default TaskListHandler;","import { REMOVE_TASK } from \"../../util/actions\";\r\n\r\nfunction TaskList ({ tasks, dispatch }) {\r\n  function removeTask (index) {\r\n    dispatch({ type: REMOVE_TASK, index })\r\n  }\r\n  return (\r\n    !!tasks.length && <ul>\r\n      {tasks.map((task, index) => (\r\n        <li key={task}>\r\n          {task}\r\n          <button onClick={() => removeTask(index)}>\r\n            remove\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nfunction TaskSelector ({ tasks, dispatch }) {\r\n  const defaultValue = \"Please enter at least 2 tasks then click the button to have your decision made\"\r\n  const [chosen, setChosen] = useState(defaultValue);\r\n\r\n  useEffect(() => {\r\n    if (chosen !== defaultValue && !tasks.includes(chosen)) {\r\n      setChosen(defaultValue);\r\n    }\r\n  }, [chosen, tasks])\r\n\r\n  function chooseRandom () {\r\n    if (tasks.length < 2) return setChosen(defaultValue);\r\n    let chosenIndex;\r\n    while(chosenIndex === undefined || tasks[chosenIndex] === chosen) {\r\n      chosenIndex = Math.floor(Math.random() * tasks.length);\r\n    }\r\n    setChosen(tasks[chosenIndex]);\r\n  }\r\n\r\n  return <div>\r\n    <button onClick={() => chooseRandom()}>\r\n      Choose a task!\r\n      </button>\r\n    {chosen}\r\n  </div>\r\n}\r\n\r\nexport default TaskSelector;\r\n","import TaskList from \"../TaskList\";\r\nimport TaskSelector from \"../TaskSelector\";\r\n\r\nfunction TaskListDisplay ({ tasks, dispatch }) {\r\n  return <>\r\n    <TaskList tasks={tasks} dispatch={dispatch} />\r\n    <TaskSelector tasks={tasks} />\r\n    </>\r\n}\r\n\r\nexport default TaskListDisplay;","import { ADD_TASK, CLEAR_LIST, REMOVE_TASK } from \"./actions\";\r\nexport default function reducer (state, action) {\r\n  switch (action.type) {\r\n    case ADD_TASK:\r\n      if (state.includes(action.fieldValue)) return state;\r\n      return [...state, action.fieldValue];\r\n    case REMOVE_TASK:\r\n      return [...state.slice(0, action.index), ...state.slice(action.index + 1)]\r\n    case CLEAR_LIST:\r\n      return [];\r\n    default:\r\n      console.log(\"Didn't understand\", action);\r\n      return state;\r\n  }\r\n}","import TaskListHandler from \"./components/TaskListHandler\";\nimport TaskListDisplay from \"./components/TaskListDisplay\";\nimport reducer from \"./util/reducer\";\nimport { useReducer } from \"react\";\n\nfunction App () {\n  const [tasks, tasksDispatch] = useReducer(reducer, []);\n  return (\n    <div>\n      Decision Making App\n      <TaskListHandler dispatch={tasksDispatch} />\n      <TaskListDisplay tasks={tasks} dispatch={tasksDispatch} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}